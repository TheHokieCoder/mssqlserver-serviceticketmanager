using System;
using System.Collections.Generic;

namespace DotNetCasClient.State
{
	/// <summary>
	/// An IServiceTicketManager implementation that relies on a Microsoft SQL Server database for
	/// ticket storage. Generally this implies that the ticket storage does not have to be
	/// maintained locally on the web server, that it can support clustered, load-balanced, or
	/// round-robin style configurations, and that authentication state can be maintained across
	/// recycling of the .NET application pools or server restarts.
	/// </summary>
	/// <author>Blair Allen</author>
	public sealed class MSSQLServiceTicketManager : IServiceTicketManager
	{
		/// <summary>
		///	Parameterless constructor needed for Reflection to instantiate it properly.
		/// </summary>
		public MSSQLServiceTicketManager()
		{
			// Do nothing
		}

		/// <summary>
		/// Performs initialization of the MSSQLServiceTicketManager.
		/// </summary>
		public void Initialize()
		{
			// Do nothing
		}

		/// <summary>
		/// Indicates whether or not the database contains the supplied serviceTicket.
		/// </summary>
		/// <param name="serviceTicket">The service ticket to check for</param>
		/// <returns>True if the ticket is contained in the store</returns>
		/// <exception cref="ArgumentNullException">serviceTicket is null</exception>
		/// <exception cref="ArgumentException">serviceTicket is empty</exception>
		public bool ContainsTicket(string serviceTicket)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Retrieves all CAS service tickets in the database that have not already expired.
		/// </summary>
		/// <returns>An enumerable collection of service tickets</returns>
		public IEnumerable<string> GetAllServiceTickets()
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Retrieves a list of all users that have non-expired CAS authentication tickets.
		/// </summary>
		/// <returns>An enumerable collection of NetId's</returns>
		public IEnumerable<string> GetAllTicketedUsers()
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Retrieves all tickets in the database that have not already expired.
		/// </summary>
		/// <returns>An enumerable collection of CasAuthenticationTickets</returns>
		public IEnumerable<CasAuthenticationTicket> GetAllTickets()
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Retrieve a CasAuthenticationTicket from the database by it's CAS service ticket.
		/// </summary>
		/// <param name="serviceTicket">The service ticket generated by the CAS server</param>
		/// <returns>The CasAuthenticationTicket or null if no matching ticket is found</returns>
		/// <exception cref="ArgumentNullException">serviceTicket is null</exception>
		/// <exception cref="ArgumentException">serviceTicket is empty</exception>
		public CasAuthenticationTicket GetTicket(string serviceTicket)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Retrieves all non-expired CAS service tickets in the database associated with the
		/// supplied netId.
		/// </summary>
		/// <param name="netId">The netId to search the database for</param>
		/// <returns>An enumerable collection of service tickets</returns>
		/// <exception cref="ArgumentNullException">netId is null</exception>
		/// <exception cref="ArgumentException">netId is empty</exception>
		public IEnumerable<string> GetUserServiceTickets(string netId)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Retrieves all non-expired tickets in the database associated with the supplied netId.
		/// </summary>
		/// <param name="netId">The NetId to search the database for</param>
		/// <returns>An enumerable collection of CasAuthenticationTickets</returns>
		/// <exception cref="ArgumentNullException">netId is null</exception>
		/// <exception cref="ArgumentException">netId is empty</exception>
		public IEnumerable<CasAuthenticationTicket> GetUserTickets(string netId)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Inserts a CasAuthenticationTicket into the database with a corresponding ticket expiration
		/// date.
		/// </summary>
		/// <param name="casAuthenticationTicket">The CasAuthenticationTicket to insert</param>
		/// <param name="expiration">The date and time at which the ticket expires</param>
		/// <exception cref="ArgumentNullException">casAuthenticationTicket is null</exception>
		public void InsertTicket(CasAuthenticationTicket casAuthenticationTicket, DateTime expiration)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Removes expired entries from the database
		/// </summary>
		public void RemoveExpiredTickets()
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Removes the ticket from the database if it exists. If the ticket does not exist in the
		/// database, just return (do not throw an exception).
		/// </summary>
		/// <param name="serviceTicket">The ticket to remove from the database</param>
		/// <exception cref="ArgumentNullException">serviceTicket is null</exception>
		/// <exception cref="ArgumentException">serviceTicket is empty</exception>
		public void RevokeTicket(string serviceTicket)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Revoke all tickets corresponding to the supplied NetId.
		/// </summary>
		/// <param name="netId">The NetId to revoke tickets for</param>
		/// <exception cref="ArgumentNullException">The netId supplied is null</exception>
		/// <exception cref="ArgumentException">The netId supplied is empty</exception>
		public void RevokeUserTickets(string netId)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Updates the expiration date and time for an existing ticket. If the ticket does not exist in
		/// the database, just return (do not throw an exception).
		/// </summary>
		/// <param name="casAuthenticationTicket">The CasAuthenticationTicket to insert</param>
		/// <param name="newExpiration">The new expiration date and time</param>
		/// <exception cref="ArgumentNullException">casAuthenticationTicket is null</exception>
		public void UpdateTicketExpiration(CasAuthenticationTicket casAuthenticationTicket, DateTime newExpiration)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Verify that the supplied casAuthenticationTicket exists in the database
		/// </summary>
		/// <param name="casAuthenticationTicket">The casAuthenticationTicket to verify</param>
		/// <returns>
		/// True if the ticket exists in the database and the properties of that ticket match the
		/// properties of the ticket in the database.
		/// </returns>
		public bool VerifyClientTicket(CasAuthenticationTicket casAuthenticationTicket)
		{
			throw new NotImplementedException();
		}
	}
}
